// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/kevenmiano/v3/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// IService is an autogenerated mock type for the IService type
type IService struct {
	mock.Mock
}

// Create provides a mock function with given fields: d
func (_m *IService) Create(d *domain.Photo) (*domain.Photo, error) {
	ret := _m.Called(d)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Photo
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Photo) (*domain.Photo, error)); ok {
		return rf(d)
	}
	if rf, ok := ret.Get(0).(func(*domain.Photo) *domain.Photo); ok {
		r0 = rf(d)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Photo)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Photo) error); ok {
		r1 = rf(d)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: d
func (_m *IService) Find(d *domain.Photo) (*domain.Photo, error) {
	ret := _m.Called(d)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *domain.Photo
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Photo) (*domain.Photo, error)); ok {
		return rf(d)
	}
	if rf, ok := ret.Get(0).(func(*domain.Photo) *domain.Photo); ok {
		r0 = rf(d)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Photo)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Photo) error); ok {
		r1 = rf(d)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIService creates a new instance of IService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IService {
	mock := &IService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
