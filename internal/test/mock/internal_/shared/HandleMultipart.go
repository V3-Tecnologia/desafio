// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	events "github.com/aws/aws-lambda-go/events"
	domain "github.com/kevenmiano/v3/internal/domain"

	mock "github.com/stretchr/testify/mock"

	shared "github.com/kevenmiano/v3/internal/shared"
)

// HandleMultipart is an autogenerated mock type for the HandleMultipart type
type HandleMultipart struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx, request, decorator
func (_m *HandleMultipart) Execute(ctx context.Context, request events.APIGatewayProxyRequest, decorator shared.Multipart[domain.Photo]) (events.APIGatewayProxyResponse, error) {
	ret := _m.Called(ctx, request, decorator)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 events.APIGatewayProxyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, events.APIGatewayProxyRequest, shared.Multipart[domain.Photo]) (events.APIGatewayProxyResponse, error)); ok {
		return rf(ctx, request, decorator)
	}
	if rf, ok := ret.Get(0).(func(context.Context, events.APIGatewayProxyRequest, shared.Multipart[domain.Photo]) events.APIGatewayProxyResponse); ok {
		r0 = rf(ctx, request, decorator)
	} else {
		r0 = ret.Get(0).(events.APIGatewayProxyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, events.APIGatewayProxyRequest, shared.Multipart[domain.Photo]) error); ok {
		r1 = rf(ctx, request, decorator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHandleMultipart creates a new instance of HandleMultipart. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandleMultipart(t interface {
	mock.TestingT
	Cleanup(func())
}) *HandleMultipart {
	mock := &HandleMultipart{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
