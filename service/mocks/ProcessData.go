// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	models "github/desafio/models"

	mock "github.com/stretchr/testify/mock"
)

// ProcessData is an autogenerated mock type for the ProcessData type
type ProcessData struct {
	mock.Mock
}

// ProcessGPSData provides a mock function with given fields: data
func (_m *ProcessData) ProcessGPSData(data models.GPS) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for ProcessGPSData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.GPS) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessGyroscopeData provides a mock function with given fields: data
func (_m *ProcessData) ProcessGyroscopeData(data models.Gyroscope) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for ProcessGyroscopeData")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Gyroscope) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessPhoto provides a mock function with given fields: data
func (_m *ProcessData) ProcessPhoto(data models.Photo) error {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for ProcessPhoto")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Photo) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProcessData creates a new instance of ProcessData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcessData(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProcessData {
	mock := &ProcessData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
